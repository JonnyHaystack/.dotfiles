" General config stuff
set autoindent softtabstop=2 shiftwidth=2 expandtab
set backspace=indent,eol,start
set number
set colorcolumn=81
set showmatch
filetype plugin indent on
syntax on
let mapleader=" "
let maplocalleader="\\"
set hlsearch
set encoding=utf-8

" Indentation settings for different filetypes
autocmd FileType c,cpp,javascript setlocal shiftwidth=4 softtabstop=4

" Perform spell check in tex file
augroup spellcheck
  autocmd!
  autocmd FileType tex inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u
augroup END

" Code folding
set foldenable
set foldmethod=syntax
set foldlevel=0

" Font
set guifont=Menlo\ Regular:h18

" GVim options
:set guioptions-=m  "remove menu bar
:set guioptions-=T  "remove toolbar
:set guioptions-=r  "remove right-hand scroll bar
:set guioptions-=L  "remove left-hand scroll bar

" Theme
colorscheme Tomorrow-Night

" Compatibility settings for tmux
set background=dark
set t_Co=256

" Toggle paste mode on/off with F2.
set pastetoggle=<F2>

" Save and close shortcuts
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader><S-q> :q!<CR>

" Reload .vimrc
nnoremap <leader>s :source ~/.vimrc<CR>

" Toggle conceallevel 2/0
nnoremap coe :setlocal conceallevel=<c-r>=&conceallevel == 0 ? '2' : '0'<cr><cr>
:map <F3> :setlocal spell! spelllang=en_gb<CR>

" Toggle scrolloff
nnoremap <Leader>zz :let &scrolloff=24-&scrolloff<CR>

" Enter normal mode convenient binding
inoremap jj <ESC>

" Use gc to swap current character with the next without changing cursor
" position.
:nnoremap <silent> gc xph

" Use gw to swap current word with the next without changing cursor position.
:nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>:nohlsearch<CR>

" Use :W to save a file as root if I forgot to use sudoedit.
command W w !sudo tee % >/dev/null

" Command-T config
set wildignore+=*.log,*.sql,*.cache,*.swp
noremap <Leader>r :CommandTFlush<CR>

" NerdTree config
let NERDTreeMapActivateNode='l'
let NERDTreeShowHidden=1
nmap <leader>n :NERDTreeToggle<CR>
nmap <leader>j :NERDTreeFind<CR>
let NERDTreeIgnore=['\.DS_Store', '\~$', '\.swp']

" GitGutter config - always display gutter
" First checks if gutters are supported in this version of vim
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif

" SimpylFold config
" Show docstrings for folded code
let g:SimpylFold_docstring_preview=1

" Airline config
let g:airline_theme='tomorrow'

" auto-pairs config
let g:AutoPairsMultilineClose = 0

" UltiSnips config {{{

set runtimepath+=~/.vim/my-snippets/
let g:UltiSnipsExpandTrigger="<C-k>"
let g:UltiSnipsJumpForwardTrigger="<C-k>"
let g:UltiSnipsJumpBackwardTrigger="<nop>"

" }}}

" vimtex config
let g:vimtex_compiler_progname = 'nvr'
let g:tex_flavor = 'latex'
let g:vimtex_view_method='zathura'
let g:tex_conceal='abdmg'

" Python config
let g:python_host_prog = '~/.virtualenvs/pynvim2/bin/python'
let g:python3_host_prog = '~/.virtualenvs/pynvim3/bin/python'


" neovim specific configuration {{{
if has('nvim')

  " ALE config {{{

  " View details
  map <leader>d :ALEDetail<CR>

  " Sign/highlight colours
  highlight ALEErrorSign ctermfg=Red
  highlight ALEWarningSign ctermfg=DarkMagenta
  highlight ALEError ctermfg=Black ctermbg=Red
  highlight ALEWarning ctermfg=Black ctermbg=DarkMagenta
  highlight ALEStyleError ctermfg=Black ctermbg=DarkMagenta
  highlight link ALEStyleWarning ALEStyleError
  highlight clear ALEInfo

  " Linter options
  let g:ale_linters = {
    \ 'c': ['cppcheck', 'clangcheck', 'clangtidy', 'cquery'],
    \ 'python': ['flake8', 'pylint']
    \ }

  " Fixer options
  let g:ale_fixers = {
    \ 'javascript': ['prettier'],
    \ }

  " }}}

  " coc.nvim config {{{

  " Use <c-space> to trigger completion
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <Tab> and <S-Tab> to navigate the completion list
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

  " Use <cr> to confirm completion
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

  " Close the preview window when completion is done
  autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

  " Use `[c` and `]c` to navigate diagnostics
  nmap <silent> [c <Plug>(coc-diagnostic-prev)
  nmap <silent> ]c <Plug>(coc-diagnostic-next)

  " Keys for gotos
  nnoremap <leader>ld <Plug>(coc-definition)
  nnoremap <leader>ly <Plug>(coc-type-definition)
  nnoremap <leader>li <Plug>(coc-implementation)
  nnoremap <leader>lr <Plug>(coc-references)

  " Format entire file
  nnoremap <leader>lf :call CocAction('format')<CR>

  " Show commands
  nnoremap <leader>lm :<C-u>CocList commands<cr>

  " Rename current word
  nmap <leader>rn <Plug>(coc-rename)

  " Format selected region
  nnoremap <leader>f <Plug>(coc-format-selected)
  xnoremap <leader>f <Plug>(coc-format-selected)

  " Do codeAction of selected region, ex: `<leader>aap` for current paragraph
  xnoremap <leader>a <Plug>(coc-codeaction-selected)
  nnoremap <leader>a <Plug>(coc-codeaction-selected)
  " Do codeAction of current line
  nmap <leader>ac <Plug>(coc-codeaction)
  " Fix autofix problem of current line
  nmap <leader>af <Plug>(coc-fix-current)

  " Use `:OR` for organize import of current buffer
  command! -nargs=0 OR :call CocAction('runCommand',
        \ 'editor.action.organizeImport')

  " Use K to show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Extensions to always install
  let g:coc_global_extensions = [
    \ 'coc-vimtex',
    \ 'coc-ultisnips',
    \ ]

  " }}}

endif
" }}}


" Load matchit.vim
:source ~/.vim/macros/matchit/plugin/matchit.vim

" Load starsearch.vim
:source ~/.vim/macros/starsearch/plugin/starsearch.vim

" Plugin list
call plug#begin()
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'vim-scripts/visualrepeat'
Plug 'tpope/vim-unimpaired'
Plug 'easymotion/vim-easymotion'
Plug 'wincent/command-t'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'tmhedberg/simpylfold'
Plug 'jiangmiao/auto-pairs'
Plug 'valloric/matchtagalways'
Plug 'wellle/targets.vim'
Plug 'lervag/vimtex'
Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
if has ('nvim')
  Plug 'w0rp/ale'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'Shougo/neco-vim'
  Plug 'neoclide/coc-neco'
  Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins' }
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
endif
" Syntax plugins
Plug 'vim-scripts/django.vim'
Plug 'nikvdp/ejs-syntax'
call plug#end()
